// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_test_2eproto();
void protobuf_InitDefaults_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class manager;
class manager_layer;

// ===================================================================

class manager_layer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.layer) */ {
 public:
  manager_layer();
  virtual ~manager_layer();

  manager_layer(const manager_layer& from);

  inline manager_layer& operator=(const manager_layer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const manager_layer& default_instance();

  static const manager_layer* internal_default_instance();

  void Swap(manager_layer* other);

  // implements Message ----------------------------------------------

  inline manager_layer* New() const { return New(NULL); }

  manager_layer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const manager_layer& from);
  void MergeFrom(const manager_layer& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(manager_layer* other);
  void UnsafeMergeFrom(const manager_layer& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // repeated int32 top = 3;
  int top_size() const;
  void clear_top();
  static const int kTopFieldNumber = 3;
  ::google::protobuf::int32 top(int index) const;
  void set_top(int index, ::google::protobuf::int32 value);
  void add_top(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      top() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_top();

  // optional int32 bottom = 4;
  bool has_bottom() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 4;
  ::google::protobuf::int32 bottom() const;
  void set_bottom(::google::protobuf::int32 value);

  // optional int32 phase = 5;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 5;
  ::google::protobuf::int32 phase() const;
  void set_phase(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.layer)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_bottom();
  inline void clear_has_bottom();
  inline void set_has_phase();
  inline void clear_has_phase();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > top_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 bottom_;
  ::google::protobuf::int32 phase_;
  friend void  protobuf_InitDefaults_test_2eproto_impl();
  friend void  protobuf_AddDesc_test_2eproto_impl();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<manager_layer> manager_layer_default_instance_;

// -------------------------------------------------------------------

class manager : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager) */ {
 public:
  manager();
  virtual ~manager();

  manager(const manager& from);

  inline manager& operator=(const manager& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const manager& default_instance();

  static const manager* internal_default_instance();

  void Swap(manager* other);

  // implements Message ----------------------------------------------

  inline manager* New() const { return New(NULL); }

  manager* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const manager& from);
  void MergeFrom(const manager& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(manager* other);
  void UnsafeMergeFrom(const manager& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef manager_layer layer;

  // accessors -------------------------------------------------------

  // required .manager.layer t1 = 1;
  bool has_t1() const;
  void clear_t1();
  static const int kT1FieldNumber = 1;
  const ::manager_layer& t1() const;
  ::manager_layer* mutable_t1();
  ::manager_layer* release_t1();
  void set_allocated_t1(::manager_layer* t1);

  // required string manager_name = 2;
  bool has_manager_name() const;
  void clear_manager_name();
  static const int kManagerNameFieldNumber = 2;
  const ::std::string& manager_name() const;
  void set_manager_name(const ::std::string& value);
  void set_manager_name(const char* value);
  void set_manager_name(const char* value, size_t size);
  ::std::string* mutable_manager_name();
  ::std::string* release_manager_name();
  void set_allocated_manager_name(::std::string* manager_name);

  // @@protoc_insertion_point(class_scope:manager)
 private:
  inline void set_has_t1();
  inline void clear_has_t1();
  inline void set_has_manager_name();
  inline void clear_has_manager_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr manager_name_;
  ::manager_layer* t1_;
  friend void  protobuf_InitDefaults_test_2eproto_impl();
  friend void  protobuf_AddDesc_test_2eproto_impl();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<manager> manager_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// manager_layer

// required string name = 1;
inline bool manager_layer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void manager_layer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void manager_layer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void manager_layer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& manager_layer::name() const {
  // @@protoc_insertion_point(field_get:manager.layer.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void manager_layer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.layer.name)
}
inline void manager_layer::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.layer.name)
}
inline void manager_layer::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.layer.name)
}
inline ::std::string* manager_layer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:manager.layer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* manager_layer::release_name() {
  // @@protoc_insertion_point(field_release:manager.layer.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void manager_layer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:manager.layer.name)
}

// required int32 type = 2;
inline bool manager_layer::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void manager_layer::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void manager_layer::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void manager_layer::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 manager_layer::type() const {
  // @@protoc_insertion_point(field_get:manager.layer.type)
  return type_;
}
inline void manager_layer::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:manager.layer.type)
}

// repeated int32 top = 3;
inline int manager_layer::top_size() const {
  return top_.size();
}
inline void manager_layer::clear_top() {
  top_.Clear();
}
inline ::google::protobuf::int32 manager_layer::top(int index) const {
  // @@protoc_insertion_point(field_get:manager.layer.top)
  return top_.Get(index);
}
inline void manager_layer::set_top(int index, ::google::protobuf::int32 value) {
  top_.Set(index, value);
  // @@protoc_insertion_point(field_set:manager.layer.top)
}
inline void manager_layer::add_top(::google::protobuf::int32 value) {
  top_.Add(value);
  // @@protoc_insertion_point(field_add:manager.layer.top)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
manager_layer::top() const {
  // @@protoc_insertion_point(field_list:manager.layer.top)
  return top_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
manager_layer::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:manager.layer.top)
  return &top_;
}

// optional int32 bottom = 4;
inline bool manager_layer::has_bottom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void manager_layer::set_has_bottom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void manager_layer::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void manager_layer::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline ::google::protobuf::int32 manager_layer::bottom() const {
  // @@protoc_insertion_point(field_get:manager.layer.bottom)
  return bottom_;
}
inline void manager_layer::set_bottom(::google::protobuf::int32 value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:manager.layer.bottom)
}

// optional int32 phase = 5;
inline bool manager_layer::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void manager_layer::set_has_phase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void manager_layer::clear_has_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void manager_layer::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::google::protobuf::int32 manager_layer::phase() const {
  // @@protoc_insertion_point(field_get:manager.layer.phase)
  return phase_;
}
inline void manager_layer::set_phase(::google::protobuf::int32 value) {
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:manager.layer.phase)
}

inline const manager_layer* manager_layer::internal_default_instance() {
  return &manager_layer_default_instance_.get();
}
// -------------------------------------------------------------------

// manager

// required .manager.layer t1 = 1;
inline bool manager::has_t1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void manager::set_has_t1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void manager::clear_has_t1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void manager::clear_t1() {
  if (t1_ != NULL) t1_->::manager_layer::Clear();
  clear_has_t1();
}
inline const ::manager_layer& manager::t1() const {
  // @@protoc_insertion_point(field_get:manager.t1)
  return t1_ != NULL ? *t1_
                         : *::manager_layer::internal_default_instance();
}
inline ::manager_layer* manager::mutable_t1() {
  set_has_t1();
  if (t1_ == NULL) {
    t1_ = new ::manager_layer;
  }
  // @@protoc_insertion_point(field_mutable:manager.t1)
  return t1_;
}
inline ::manager_layer* manager::release_t1() {
  // @@protoc_insertion_point(field_release:manager.t1)
  clear_has_t1();
  ::manager_layer* temp = t1_;
  t1_ = NULL;
  return temp;
}
inline void manager::set_allocated_t1(::manager_layer* t1) {
  delete t1_;
  t1_ = t1;
  if (t1) {
    set_has_t1();
  } else {
    clear_has_t1();
  }
  // @@protoc_insertion_point(field_set_allocated:manager.t1)
}

// required string manager_name = 2;
inline bool manager::has_manager_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void manager::set_has_manager_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void manager::clear_has_manager_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void manager::clear_manager_name() {
  manager_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_manager_name();
}
inline const ::std::string& manager::manager_name() const {
  // @@protoc_insertion_point(field_get:manager.manager_name)
  return manager_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void manager::set_manager_name(const ::std::string& value) {
  set_has_manager_name();
  manager_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.manager_name)
}
inline void manager::set_manager_name(const char* value) {
  set_has_manager_name();
  manager_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.manager_name)
}
inline void manager::set_manager_name(const char* value, size_t size) {
  set_has_manager_name();
  manager_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.manager_name)
}
inline ::std::string* manager::mutable_manager_name() {
  set_has_manager_name();
  // @@protoc_insertion_point(field_mutable:manager.manager_name)
  return manager_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* manager::release_manager_name() {
  // @@protoc_insertion_point(field_release:manager.manager_name)
  clear_has_manager_name();
  return manager_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void manager::set_allocated_manager_name(::std::string* manager_name) {
  if (manager_name != NULL) {
    set_has_manager_name();
  } else {
    clear_has_manager_name();
  }
  manager_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manager_name);
  // @@protoc_insertion_point(field_set_allocated:manager.manager_name)
}

inline const manager* manager::internal_default_instance() {
  return &manager_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
